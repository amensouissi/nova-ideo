# -*- coding: utf-8 -*-
#************************************************************
#*       
#* Code automatically generated by OMEGSI
#*
#************************************************************
from zope.interface import Interface, implementer
from dace.util import utility
from diff_match_patch import diff_match_patch 

 

class ITextAnalyzer(Interface):
    """TODO IText_analyzer
    """

    def hasConflict(originetexte, textes):
        pass

    def merge(originetexte, textes):
        pass




@utility(name='text_analyzer')
@implementer(ITextAnalyzer)
class TextAnalyzer(object):
    """TODO text_analyzer
    """

    def hasConflict(self, originetexte, textes):
        d = diff_match_patch()
        d.Match_Threshold = 0.1
        result = originetexte
        haseconflict = False
        for alternatif in textes:
            result, results = d.patch_apply(d.patch_make(originetexte, alternatif), result)
            if False in results:
                haseconflict = True
                break

        return haseconflict


    def merge(self, originetexte, textes):
        d = diff_match_patch()
        d.Match_Threshold = 0.1
        texteresult = originetexte
        conflict = False
        for alternatif in textes:
            texteresult, results = d.patch_apply(d.patch_make(originetexte, alternatif), texteresult)
            if False in results:
                conflict = True
                break

        return texteresult





